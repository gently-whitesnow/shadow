using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;
using Shadow.Agent.DA;
using Shadow.Agent.Models;
using Shadow.Agent.Models.Bo;
using Shadow.Agent.Models.DbModels;

namespace Shadow.Agent.Services;

public sealed class MessengerService(
    IEnumerable<IMessengerClient> clients) : IResultConsumer
{
    public async Task SendResultAsync(ScopeDbModel scope, TestRunMeta meta, TestRunResult result)
    {
        if (scope.MessengerNotifyReason == (int)NotifyReason.None)
            return;
        
        if (scope.MessengerNotifyReason == (int)NotifyReason.Failed && result.Failed == 0)
            return;

        var text = GetMessage(meta, result);
        foreach (var client in clients)
        {
            await client.SendMessageAsync(scope.MessengerChannelId, text);
        }
    }

    private static string GetMessage(TestRunMeta meta, TestRunResult result)
    {
        // 1. –≤—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        var started = DateTimeOffset.Parse(meta.StartUtc ?? "", null, DateTimeStyles.AssumeUniversal);
        var finished = DateTimeOffset.Parse(meta.FinishUtc ?? "", null, DateTimeStyles.AssumeUniversal);
        var duration = finished - started;
        string dur = duration.TotalSeconds < 1
            ? $"{duration.TotalMilliseconds:N0} ms"
            : $"{duration.TotalSeconds:N0} s";
        // 2. –≥–æ—Ç–æ–≤–∏–º –∫–æ—Ä–æ—Ç–∫–∏–π SHA –∏ CPU-count
        string shortSha = string.Join("", (meta.Commit ?? string.Empty).Take(7));
        string cpuInfo = int.TryParse(meta.ProcessorCount, out var cpu) ? $"{cpu} CPU" : meta.ProcessorCount;

        // 3. —Å–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return
    $"""
üß™ {result.Passed} / {result.Total} ‚úì‚ÄÉ‚ùå {result.Failed}‚ÄÉ‚ö†Ô∏è {result.Skipped}
üë§ {meta.OsUser} ¬∑ {meta.Scope}‚ÄÉ üíª {meta.MachineName} ({meta.OsPlatform?.Split('-').FirstOrDefault() ?? meta.OsPlatform}, {cpuInfo})
üåø {meta.Branch} @ {shortSha}‚ÄÉ‚è± {dur} ({started:HH:mm:ss}‚Üí{finished:HH:mm:ss} UTC)
üîó run {meta.RunId}
""";
    }
}