#!/usr/bin/env sh
##############################################################################
# 0.  –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ä–µ–ø–æ –∏ –ª–æ–≥-—Ñ–∞–π–ª—É (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤ hooks, –∏ –∏–∑ –ª—é–±–æ–≥–æ CWD)
##############################################################################
REPO_ROOT=$(git -C "$(dirname "$0")/.." rev-parse --show-toplevel 2>/dev/null || pwd)
LOG_FILE="$REPO_ROOT/.shadow/test-run.log"
mkdir -p "$(dirname "$LOG_FILE")"

##############################################################################
# 1.  –µ—Å–ª–∏ setsid –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (macOS), fallback –Ω–∞ nohup & disown
##############################################################################
if command -v setsid >/dev/null 2>&1; then
  DETACH_CMD="setsid"
else                                   # macOS: brew install util-linux –¥–∞—ë—Ç setsid
  echo "‚ö†Ô∏è  setsid not found; using plain nohup+disown" >>"$LOG_FILE"
  DETACH_CMD=""
fi

##############################################################################
# 2.  –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ ‚Üí –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ –∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –≤—ã—Ö–æ–¥
##############################################################################
if [ -z "$DETACHED" ]; then
  export DETACHED=1
  {
    echo "üöÄ $(date '+%F %T') start   cfg=$1"
    echo "  pid(parent)=$$   cwd=$(pwd)"
    echo "  PATH=$PATH"
  } >"$LOG_FILE"

  # detach: ( subshell ) & + optional setsid, stdout/err —É–∂–µ –≤ –õ–û–ì
  (
    $DETACH_CMD nohup "$0" "$@" >>"$LOG_FILE" 2>&1
  ) &
  disown  # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–µ-–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Ç–µ–∫—É—â–µ–º—É shell
  exit 0  # ‚Üí git push –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É
fi

##############################################################################
# 3.  –ª–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Ç–æ—á–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª
##############################################################################
echo "‚îÄ‚îÄ detached OK  pid=$$  ppid=$PPID  cwd=$(pwd) ‚îÄ‚îÄ"

CONFIG_FILE="$1"
echo "cfg file = $CONFIG_FILE"

##############################################################################
# 4.  –ø—Ä–æ–≤–µ—Ä—è–µ–º dotnet –∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
##############################################################################
DOTNET=$(command -v dotnet || true)
[ -z "$DOTNET" ] && { echo "‚ùå dotnet not found"; exit 127; }
echo "dotnet = $DOTNET"

if [ -f "$CONFIG_FILE" ]; then
  mapfile -t TESTS < <(jq -r '.test_projects_root_absolute_path[]?' "$CONFIG_FILE")
  echo "projects(${#TESTS[@]}): ${TESTS[*]}"
else
  echo "‚ö†Ô∏è  config missing ‚Üí —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º"
  TESTS=()
fi

##############################################################################
# 5.  —Å–∞–º–∏ —Ç–µ—Å—Ç—ã
##############################################################################
run_tests () {
  for p; do
    echo "üîπ dotnet test $p"
    $DOTNET test "$p" --no-build --verbosity normal || return $?
  done
}

if [ ${#TESTS[@]} -gt 0 ]; then
  run_tests "${TESTS[@]}"
  STATUS=$?
else
  echo "üîπ dotnet test (solution)"
  $DOTNET test --no-build --verbosity normal
  STATUS=$?
fi

echo "‚îÄ‚îÄ finished pid=$$  status=$STATUS ‚îÄ‚îÄ"
exit $STATUS