#!/usr/bin/env bash
# –¢—Ä–µ–±—É–µ—Ç—Å—è bash ‚â• 4 (Linux –æ–±—ã—á–Ω–æ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç, macOS: brew install bash)

set -euo pipefail        # –ª–æ–≤–∏–º –ª—é–±—ã–µ —Å–±–æ–∏

##############################################################################
# 0. –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
##############################################################################
REPO_ROOT="$(git -C "${BASH_SOURCE%/*}" rev-parse --show-toplevel 2>/dev/null)"
LOG_FILE="$REPO_ROOT/.shadow/test-run.log"
mkdir -p "${LOG_FILE%/*}"
SCRIPT_ABS="$(cd "${BASH_SOURCE%/*}" && pwd)/$(basename "$0")"

##############################################################################
# 1. Detach (–ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥)
##############################################################################
if [[ -z ${DETACHED:-} ]]; then
  export DETACHED=1
  {
    printf 'üöÄ %s start cfg=%s  pid=%s\n' "$(date '+%F %T')" "$1" "$$"
    printf 'cwd(parent)=%s\nPATH=%s\n' "$(pwd)" "$PATH"
  } >"$LOG_FILE"

  if command -v setsid &>/dev/null; then
    setsid "$SCRIPT_ABS" "$@" >>"$LOG_FILE" 2>&1 &
    CHILD=$!
  else
    echo "‚ö† setsid missing ‚Üí nohup" >>"$LOG_FILE"
    nohup "$SCRIPT_ABS" "$@" >>"$LOG_FILE" 2>&1 &
    CHILD=$!
    disown
  fi
  echo "spawn child pid=$CHILD" >>"$LOG_FILE"
  exit 0
fi

##############################################################################
# 2. –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
##############################################################################
echo "‚îÄ‚îÄ child pid=$$ ppid=$PPID cwd=$(pwd) ‚îÄ‚îÄ"

CFG="$1"
DOTNET=$(command -v dotnet || true)
[[ -z $DOTNET ]] && { echo "‚ùå dotnet not found"; exit 127; }

JQ=$(command -v jq || true)
[[ -z $JQ ]] && echo "‚ö† jq not found ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω"

# –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ (–±–µ–∑ < <(...))
PROJECTS=()
if [[ -n $JQ && -f $CFG ]]; then
  while IFS= read -r line; do
    [[ -n $line ]] && PROJECTS+=("$line")
  done < <("$JQ" -r '.test_projects_root_absolute_path[]?' "$CFG")
fi
echo "projects(${#PROJECTS[@]}): ${PROJECTS[*]:-whole-solution}"

run_test() {
  echo "üîπ dotnet test $1"
  "$DOTNET" test "$1" --no-build --verbosity normal
}

if (( ${#PROJECTS[@]} )); then
  for p in "${PROJECTS[@]}"; do run_test "$p"; done
else
  run_test # —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å—ë —Ä–µ—à–µ–Ω–∏–µ
fi

status=$?
printf '‚îÄ‚îÄ finished %s pid=%s status=%s ‚îÄ‚îÄ\n' "$(date '+%F %T')" "$$" "$status"
exit $status